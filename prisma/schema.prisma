// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// -----------------------------
///  Core auth / user models
///  (matches Auth.js adapter)
/// -----------------------------
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  emailVerified DateTime?
  name          String?
  image         String?
  username      String?   @unique

  // App‚Äìspecific
  isBot Boolean @default(false)

  accounts       Account[]
  sessions       Session[]
  messages       Message[]       @relation("UserMessages")
  channelMembers ChannelMember[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Channel Channel[]

  // Optional for WebAuthn support
  Authenticator Authenticator[]

  reactions Reaction[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Channel {
  id        String   @id @default(uuid())
  name      String? // null for 1-to-1 DMs
  description String?
  isDirect  Boolean  @default(false)
  creatorId String
  createdAt DateTime @default(now())

  creator  User            @relation(fields: [creatorId], references: [id])
  members  ChannelMember[]
  messages Message[]

  // For fast look-ups of "DM between A & B" we hash the member ids
  directHash String? @unique
}

model ChannelMember {
  id        String   @id @default(uuid())
  channelId String
  userId    String
  joinedAt  DateTime @default(now())
  role      String   @default("member") // member | admin

  channel Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([channelId, userId])
}

model Message {
  id        String   @id @default(uuid())
  channelId String
  senderId  String
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  channel Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)
  sender  User    @relation("UserMessages", fields: [senderId], references: [id], onDelete: Cascade)

  reactions Reaction[]
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Reaction {
  messageId String
  userId    String
  emoji     String  // unicode, e.g. "üëç" or custom:<id>
  createdAt DateTime @default(now())

  message Message @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([messageId, userId, emoji])       // each user ‚Üí 1 reaction per emoji per message
  @@index([messageId, emoji])            // fast aggregation
}
