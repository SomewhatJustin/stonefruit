// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// -----------------------------
///  Core auth / user models
///  (matches NextAuth.js adapter)
/// -----------------------------
model User {
  id            String    @id @default(uuid())
  email         String    @unique
  emailVerified DateTime?
  name          String?
  image         String?
  username      String?   @unique

  // App–specific
  isBot Boolean @default(false)

  accounts       Account[]
  sessions       Session[]
  messages       Message[]       @relation("UserMessages")
  channelMembers ChannelMember[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Channel Channel[]
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Channel {
  id        String   @id @default(uuid())
  name      String? // null for 1-to-1 DMs
  isDirect  Boolean  @default(false)
  creatorId String
  createdAt DateTime @default(now())

  creator  User            @relation(fields: [creatorId], references: [id])
  members  ChannelMember[]
  messages Message[]

  // For fast look-ups of “DM between A & B” we hash the member ids
  directHash String? @unique
}

model ChannelMember {
  id        String   @id @default(uuid())
  channelId String
  userId    String
  joinedAt  DateTime @default(now())
  role      String   @default("member") // member | admin

  channel Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([channelId, userId])
}

model Message {
  id        String   @id @default(uuid())
  channelId String
  senderId  String
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  channel Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)
  sender  User    @relation("UserMessages", fields: [senderId], references: [id], onDelete: Cascade)
}
